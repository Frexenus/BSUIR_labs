

#include <windows.h>
#include <stdlib.h>
#include <string.h>
#include <tchar.h>
#include "resource.h"
#include <math.h>
#define FIRST_TIMER 1


int nTimerID;

TCHAR czClassName[] = "myClass";
TCHAR czFormName[] = "Ëàáîðàòîðíàÿ ðàáîòà 1: Ïðèîæåíèÿ Windows ñ èñïîëüçîâàíèåì Win 32 API";
TCHAR mainMessage[] = "SAMPLE TEXT";
HWND hwndA;
HINSTANCE Hinst;

int leftborder = 330;
int rightborder = 600;
int currentstate = 330;
bool leftright = true;

bool istextshow = false;


LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	HDC hDC = GetDC(hwnd);
	PAINTSTRUCT ps;
	RECT rect;
	COLORREF colorText = RGB(0, 0, 255);

	BYTE ANDmaskCursor[] = {
		0xFF, 0xFC, 0x3F, 0xFF,
		0xFF, 0xC0, 0x1F, 0xFF,
		0xFF, 0x00, 0x3F, 0xFF,
		0xFE, 0x00, 0xFF, 0xFF,

		0xF7, 0x01, 0xFF, 0xFF,
		0xF0, 0x03, 0xFF, 0xFF,
		0xF0, 0x03, 0xFF, 0xFF,
		0xE0, 0x07, 0xFF, 0xFF,

		0xC0, 0x07, 0xFF, 0xFF,
		0xC0, 0x0F, 0xFF, 0xFF,
		0x80, 0x0F, 0xFF, 0xFF,
		0x80, 0x0F, 0xFF, 0xFF,

		0x80, 0x07, 0xFF, 0xFF,
		0x00, 0x07, 0xFF, 0xFF,
		0x00, 0x03, 0xFF, 0xFF,
		0x00, 0x00, 0xFF, 0xFF,

		0x00, 0x00, 0x7F, 0xFF,
		0x00, 0x00, 0x1F, 0xFF,
		0x00, 0x00, 0x0F, 0xFF,
		0x80, 0x00, 0x0F, 0xFF,

		0x80, 0x00, 0x07, 0xFF,
		0x80, 0x00, 0x07, 0xFF,
		0xC0, 0x00, 0x07, 0xFF,
		0xC0, 0x00, 0x0F, 0xFF,

		0xE0, 0x00, 0x0F, 0xFF,
		0xF0, 0x00, 0x1F, 0xFF,
		0xF0, 0x00, 0x1F, 0xFF,
		0xF8, 0x00, 0x3F, 0xFF,

		0xFE, 0x00, 0x7F, 0xFF,
		0xFF, 0x00, 0xFF, 0xFF,
		0xFF, 0xC3, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF
	};

	BYTE XORmaskCursor[] = {
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x03, 0xC0, 0x00,
		0x00, 0x3F, 0x00, 0x00,
		0x00, 0xFE, 0x00, 0x00,

		0x0E, 0xFC, 0x00, 0x00,
		0x07, 0xF8, 0x00, 0x00,
		0x07, 0xF8, 0x00, 0x00,
		0x0F, 0xF0, 0x00, 0x00,

		0x1F, 0xF0, 0x00, 0x00,
		0x1F, 0xE0, 0x00, 0x00,
		0x3F, 0xE0, 0x00, 0x00,
		0x3F, 0xE0, 0x00, 0x00,

		0x3F, 0xF0, 0x00, 0x00,
		0x7F, 0xF0, 0x00, 0x00,
		0x7F, 0xF8, 0x00, 0x00,
		0x7F, 0xFC, 0x00, 0x00,

		0x7F, 0xFF, 0x00, 0x00,
		0x7F, 0xFF, 0x80, 0x00,
		0x7F, 0xFF, 0xE0, 0x00,
		0x3F, 0xFF, 0xE0, 0x00,

		0x3F, 0xC7, 0xF0, 0x00,
		0x3F, 0x83, 0xF0, 0x00,
		0x1F, 0x83, 0xF0, 0x00,
		0x1F, 0x83, 0xE0, 0x00,

		0x0F, 0xC7, 0xE0, 0x00,
		0x07, 0xFF, 0xC0, 0x00,
		0x07, 0xFF, 0xC0, 0x00,
		0x01, 0xFF, 0x80, 0x00,

		0x00, 0xFF, 0x00, 0x00,
		0x00, 0x3C, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00
	};

	BYTE ANDmaskIcon[] = {
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xC3, 0xFF,
		0xFF, 0xFF, 0x00, 0xFF,
		0xFF, 0xFE, 0x00, 0x7F,

		0xFF, 0xFC, 0x00, 0x1F,
		0xFF, 0xF8, 0x00, 0x0F,
		0xFF, 0xF8, 0x00, 0x0F,
		0xFF, 0xF0, 0x00, 0x07,

		0xFF, 0xF0, 0x00, 0x03,
		0xFF, 0xE0, 0x00, 0x03,
		0xFF, 0xE0, 0x00, 0x01,
		0xFF, 0xE0, 0x00, 0x01,

		0xFF, 0xF0, 0x00, 0x01,
		0xFF, 0xF0, 0x00, 0x00,
		0xFF, 0xF8, 0x00, 0x00,
		0xFF, 0xFC, 0x00, 0x00,

		0xFF, 0xFF, 0x00, 0x00,
		0xFF, 0xFF, 0x80, 0x00,
		0xFF, 0xFF, 0xE0, 0x00,
		0xFF, 0xFF, 0xE0, 0x01,

		0xFF, 0xFF, 0xF0, 0x01,
		0xFF, 0xFF, 0xF0, 0x01,
		0xFF, 0xFF, 0xF0, 0x03,
		0xFF, 0xFF, 0xE0, 0x03,

		0xFF, 0xFF, 0xE0, 0x07,
		0xFF, 0xFF, 0xC0, 0x0F,
		0xFF, 0xFF, 0xC0, 0x0F,
		0xFF, 0xFF, 0x80, 0x1F,

		0xFF, 0xFF, 0x00, 0x7F,
		0xFF, 0xFC, 0x00, 0xFF,
		0xFF, 0xF8, 0x03, 0xFF,
		0xFF, 0xFC, 0x3F, 0xFF };

	BYTE XORmaskIcon[] = {
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x38, 0x00,

		0x00, 0x00, 0x7C, 0x00,
		0x00, 0x00, 0x7C, 0x00,
		0x00, 0x00, 0x7C, 0x00,
		0x00, 0x00, 0x38, 0x00,

		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00 };

	HCURSOR hCurs1;

	HICON hIcon1 = CreateIcon(
		Hinst,
		32,
		32,
		1,
		1,
		ANDmaskIcon,
		XORmaskIcon);

	hCurs1 = CreateCursor(
		Hinst,
		19,
		2,
		32,
		32,
		ANDmaskCursor,
		XORmaskCursor);

	SetCursor(hCurs1);
	SetClassLong(hwnd, GCL_HICON,
		(LONG)LoadIcon(Hinst, MAKEINTRESOURCE(IDI_ICON1)));

	nTimerID =
		SetTimer(hwnd, FIRST_TIMER, 100, NULL);
	switch (message)
	{
	case WM_TIMER:
		if (istextshow) {
			InvalidateRect(hwnd, NULL, TRUE);
			UpdateWindow(hwnd);
			if (leftright) currentstate += 10;
			else currentstate -= 10;
			if (currentstate > rightborder) leftright = false;
			if (currentstate < leftborder) leftright = true;
			TextOut(hDC, currentstate, 270, mainMessage, strlen(mainMessage));
			break;
		}



	case WM_COMMAND:
		switch (HIWORD(wParam))
		{
		case BN_CLICKED:
			if (wParam == 0) istextshow = true;
			if (wParam == 1) istextshow = false;
			break;
		}
		break;
	case WM_PAINT:{
			hDC = BeginPaint(hwnd, &ps); 
			GetClientRect(hwnd, &rect); 
			SetTextColor(hDC, colorText); 
			EndPaint(hwnd, &ps); 
			break;
		}
	default: return DefWindowProc(hwnd, message, wParam, lParam); break;
	}
}

ATOM myRegistryClass(HINSTANCE hInst, int cmdMode)
{
	WNDCLASS cw;
	cw.style = CS_VREDRAW | CS_HREDRAW;
	cw.cbClsExtra = 0;
	cw.cbWndExtra = 0;
	cw.hbrBackground = (HBRUSH)(COLOR_WINDOW + 2);
	cw.hCursor = LoadCursor(NULL, IDC_ARROW);
	cw.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	cw.hInstance = hInst;
	cw.lpfnWndProc = WndProc;
	cw.lpszClassName = czClassName;
	cw.lpszMenuName = NULL;
	RegisterClass(&cw);
	return 0;
}

BOOL showwindow(HINSTANCE hInst, int Mode)
{
	hwndA = CreateWindow(
		czClassName,
		czFormName,
		WS_OVERLAPPEDWINDOW | WS_VISIBLE,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		NULL,
		NULL,
		hInst,
		NULL);
	ShowWindow(hwndA, Mode);
	UpdateWindow(hwndA);
	return TRUE;
}

int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInstance, LPSTR IpszCmdParam, int cmdShow)
{
	Hinst = hInst;
	MSG msg;
	myRegistryClass(hInst, cmdShow);
	showwindow(hInst, cmdShow);
	HMENU hmenu1 = CreateMenu();
	AppendMenu(hmenu1, MF_STRING, 0, "&Start");
	AppendMenu(hmenu1, MF_STRING, 1, "&Stop");
	SetMenu(hwndA, hmenu1);



	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
	return 0;
}