
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'IDENTIFIER NON_STRICT_COMPARISON NON_EQUALITY COMPARISON ASSIGNMENT SEMICOLON EQUALITY COLON COMMA OPEN_BRACKET CLOSE_BRACKET NUMBER PLUS MINUS DIV MUL STRING POINT TYPE_REAL DO BEGIN CONST TYPE_STRING FOR TO READLN AND WRITELN DOWNTO WHILE THEN TYPE_INTEGER VAR END INC OR IF\n        program : var begin\n    \n        var : VAR declare\n    \n        begin : BEGIN body END POINT\n    \n        declare : declaration declare\n                 | empty\n    \n        block : BEGIN body END SEMICOLON\n    \n        body : expression\n    \n    expression : assignment expression\n                | if expression\n                | function expression\n                | empty\n                | while expression\n\n    \n        declaration : IDENTIFIER COLON type SEMICOLON\n    \n        type : TYPE_STRING\n             | TYPE_INTEGER\n             | TYPE_REAL\n    \n        empty :\n    \n        assignment : IDENTIFIER ASSIGNMENT arithmetic_expression SEMICOLON\n    \n    arithmetic_expression : IDENTIFIER PLUS arithmetic_expression\n                     | IDENTIFIER MINUS arithmetic_expression\n                     | IDENTIFIER MUL arithmetic_expression\n                     | IDENTIFIER DIV arithmetic_expression\n\n                     | NUMBER PLUS arithmetic_expression\n                     | NUMBER MINUS arithmetic_expression\n                     | NUMBER MUL arithmetic_expression\n                     | NUMBER DIV arithmetic_expression\n                     | NUMBER\n                     | IDENTIFIER\n                     | STRING\n    \n        function : WRITELN OPEN_BRACKET arithmetic_expression CLOSE_BRACKET SEMICOLON\n                    | READLN OPEN_BRACKET IDENTIFIER CLOSE_BRACKET SEMICOLON\n                    | INC OPEN_BRACKET IDENTIFIER CLOSE_BRACKET SEMICOLON\n    \n    predicate :    IDENTIFIER EQUALITY arithmetic_expression\n                  | NUMBER  EQUALITY arithmetic_expression\n                  | IDENTIFIER  NON_EQUALITY arithmetic_expression\n                  | NUMBER  NON_STRICT_COMPARISON arithmetic_expression\n                  | IDENTIFIER  NON_STRICT_COMPARISON arithmetic_expression\n                  | NUMBER  NON_EQUALITY arithmetic_expression\n                  | NUMBER COMPARISON arithmetic_expression\n                  | NUMBER\n                  | IDENTIFIER\n    \n        while : WHILE predicate DO block\n    \n        if : IF predicate THEN block\n            | IF predicate THEN expression\n    '
    
_lr_action_items = {'CLOSE_BRACKET':([51,52,53,55,57,58,84,85,86,87,88,89,90,91,],[-29,-27,-28,78,81,82,-23,-25,-26,-24,-19,-21,-22,-20,]),'DO':([26,27,28,51,52,53,62,63,64,65,66,67,68,84,85,86,87,88,89,90,91,],[42,-40,-41,-29,-27,-28,-39,-36,-34,-38,-35,-33,-37,-23,-25,-26,-24,-19,-21,-22,-20,]),'TYPE_STRING':([24,],[38,]),'NON_STRICT_COMPARISON':([27,28,],[44,49,]),'THEN':([27,28,34,51,52,53,62,63,64,65,66,67,68,84,85,86,87,88,89,90,91,],[-40,-41,56,-29,-27,-28,-39,-36,-34,-38,-35,-33,-37,-23,-25,-26,-24,-19,-21,-22,-20,]),'ASSIGNMENT':([13,],[30,]),'TYPE_INTEGER':([24,],[40,]),'NUMBER':([11,18,30,33,43,44,45,46,47,48,49,70,71,72,73,74,75,76,77,],[27,27,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'WHILE':([5,10,12,14,16,20,25,29,32,36,56,60,61,69,79,80,92,93,94,96,],[11,11,11,-11,11,11,-10,-9,-8,-12,11,11,-42,-18,-44,-43,-30,-31,-32,-6,]),'MUL':([52,53,],[71,75,]),'DIV':([52,53,],[72,76,]),'MINUS':([52,53,],[73,77,]),'COMPARISON':([27,],[43,]),'BEGIN':([1,2,6,8,9,23,42,56,59,],[5,-17,-17,-2,-5,-4,60,60,-13,]),'EQUALITY':([27,28,],[45,48,]),'SEMICOLON':([38,39,40,41,50,51,52,53,78,81,82,84,85,86,87,88,89,90,91,95,],[-14,-16,-15,59,69,-29,-27,-28,92,93,94,-23,-25,-26,-24,-19,-21,-22,-20,96,]),'POINT':([31,],[54,]),'OPEN_BRACKET':([17,19,22,],[33,35,37,]),'COLON':([7,],[24,]),'PLUS':([52,53,],[70,74,]),'IDENTIFIER':([2,5,6,10,11,12,14,16,18,20,25,29,30,32,33,35,36,37,43,44,45,46,47,48,49,56,59,60,61,69,70,71,72,73,74,75,76,77,79,80,92,93,94,96,],[7,13,7,13,28,13,-11,13,28,13,-10,-9,53,-8,53,57,-12,58,53,53,53,53,53,53,53,13,-13,13,-42,-18,53,53,53,53,53,53,53,53,-44,-43,-30,-31,-32,-6,]),'$end':([3,4,54,],[0,-1,-3,]),'END':([5,10,12,14,15,16,20,21,25,29,32,36,56,60,61,69,79,80,83,92,93,94,96,],[-17,-17,-17,-11,31,-17,-17,-7,-10,-9,-8,-12,-17,-17,-42,-18,-44,-43,95,-30,-31,-32,-6,]),'STRING':([30,33,43,44,45,46,47,48,49,70,71,72,73,74,75,76,77,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'WRITELN':([5,10,12,14,16,20,25,29,32,36,56,60,61,69,79,80,92,93,94,96,],[17,17,17,-11,17,17,-10,-9,-8,-12,17,17,-42,-18,-44,-43,-30,-31,-32,-6,]),'VAR':([0,],[2,]),'NON_EQUALITY':([27,28,],[46,47,]),'IF':([5,10,12,14,16,20,25,29,32,36,56,60,61,69,79,80,92,93,94,96,],[18,18,18,-11,18,18,-10,-9,-8,-12,18,18,-42,-18,-44,-43,-30,-31,-32,-6,]),'TYPE_REAL':([24,],[39,]),'READLN':([5,10,12,14,16,20,25,29,32,36,56,60,61,69,79,80,92,93,94,96,],[19,19,19,-11,19,19,-10,-9,-8,-12,19,19,-42,-18,-44,-43,-30,-31,-32,-6,]),'INC':([5,10,12,14,16,20,25,29,32,36,56,60,61,69,79,80,92,93,94,96,],[22,22,22,-11,22,22,-10,-9,-8,-12,22,22,-42,-18,-44,-43,-30,-31,-32,-6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([5,60,],[15,83,]),'function':([5,10,12,16,20,56,60,],[10,10,10,10,10,10,10,]),'begin':([1,],[4,]),'type':([24,],[41,]),'assignment':([5,10,12,16,20,56,60,],[16,16,16,16,16,16,16,]),'predicate':([11,18,],[26,34,]),'while':([5,10,12,16,20,56,60,],[20,20,20,20,20,20,20,]),'program':([0,],[3,]),'block':([42,56,],[61,80,]),'declaration':([2,6,],[6,6,]),'var':([0,],[1,]),'arithmetic_expression':([30,33,43,44,45,46,47,48,49,70,71,72,73,74,75,76,77,],[50,55,62,63,64,65,66,67,68,84,85,86,87,88,89,90,91,]),'expression':([5,10,12,16,20,56,60,],[21,25,29,32,36,79,21,]),'declare':([2,6,],[8,23,]),'empty':([2,5,6,10,12,16,20,56,60,],[9,14,9,14,14,14,14,14,14,]),'if':([5,10,12,16,20,56,60,],[12,12,12,12,12,12,12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> var begin','program',2,'p_program','mtran_lab2.py',69),
  ('var -> VAR declare','var',2,'p_var','mtran_lab2.py',76),
  ('begin -> BEGIN body END POINT','begin',4,'p_begin','mtran_lab2.py',83),
  ('declare -> declaration declare','declare',2,'p_declare','mtran_lab2.py',90),
  ('declare -> empty','declare',1,'p_declare','mtran_lab2.py',91),
  ('block -> BEGIN body END SEMICOLON','block',4,'p_block','mtran_lab2.py',101),
  ('body -> expression','body',1,'p_body','mtran_lab2.py',108),
  ('expression -> assignment expression','expression',2,'p_expression','mtran_lab2.py',115),
  ('expression -> if expression','expression',2,'p_expression','mtran_lab2.py',116),
  ('expression -> function expression','expression',2,'p_expression','mtran_lab2.py',117),
  ('expression -> empty','expression',1,'p_expression','mtran_lab2.py',118),
  ('expression -> while expression','expression',2,'p_expression','mtran_lab2.py',119),
  ('declaration -> IDENTIFIER COLON type SEMICOLON','declaration',4,'p_declaration','mtran_lab2.py',130),
  ('type -> TYPE_STRING','type',1,'p_type','mtran_lab2.py',137),
  ('type -> TYPE_INTEGER','type',1,'p_type','mtran_lab2.py',138),
  ('type -> TYPE_REAL','type',1,'p_type','mtran_lab2.py',139),
  ('empty -> <empty>','empty',0,'p_empty','mtran_lab2.py',146),
  ('assignment -> IDENTIFIER ASSIGNMENT arithmetic_expression SEMICOLON','assignment',4,'p_assignment','mtran_lab2.py',153),
  ('arithmetic_expression -> IDENTIFIER PLUS arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','mtran_lab2.py',160),
  ('arithmetic_expression -> IDENTIFIER MINUS arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','mtran_lab2.py',161),
  ('arithmetic_expression -> IDENTIFIER MUL arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','mtran_lab2.py',162),
  ('arithmetic_expression -> IDENTIFIER DIV arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','mtran_lab2.py',163),
  ('arithmetic_expression -> NUMBER PLUS arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','mtran_lab2.py',165),
  ('arithmetic_expression -> NUMBER MINUS arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','mtran_lab2.py',166),
  ('arithmetic_expression -> NUMBER MUL arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','mtran_lab2.py',167),
  ('arithmetic_expression -> NUMBER DIV arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','mtran_lab2.py',168),
  ('arithmetic_expression -> NUMBER','arithmetic_expression',1,'p_arithmetic_expression','mtran_lab2.py',169),
  ('arithmetic_expression -> IDENTIFIER','arithmetic_expression',1,'p_arithmetic_expression','mtran_lab2.py',170),
  ('arithmetic_expression -> STRING','arithmetic_expression',1,'p_arithmetic_expression','mtran_lab2.py',171),
  ('function -> WRITELN OPEN_BRACKET arithmetic_expression CLOSE_BRACKET SEMICOLON','function',5,'p_function','mtran_lab2.py',189),
  ('function -> READLN OPEN_BRACKET IDENTIFIER CLOSE_BRACKET SEMICOLON','function',5,'p_function','mtran_lab2.py',190),
  ('function -> INC OPEN_BRACKET IDENTIFIER CLOSE_BRACKET SEMICOLON','function',5,'p_function','mtran_lab2.py',191),
  ('predicate -> IDENTIFIER EQUALITY arithmetic_expression','predicate',3,'p_predicate','mtran_lab2.py',208),
  ('predicate -> NUMBER EQUALITY arithmetic_expression','predicate',3,'p_predicate','mtran_lab2.py',209),
  ('predicate -> IDENTIFIER NON_EQUALITY arithmetic_expression','predicate',3,'p_predicate','mtran_lab2.py',210),
  ('predicate -> NUMBER NON_STRICT_COMPARISON arithmetic_expression','predicate',3,'p_predicate','mtran_lab2.py',211),
  ('predicate -> IDENTIFIER NON_STRICT_COMPARISON arithmetic_expression','predicate',3,'p_predicate','mtran_lab2.py',212),
  ('predicate -> NUMBER NON_EQUALITY arithmetic_expression','predicate',3,'p_predicate','mtran_lab2.py',213),
  ('predicate -> NUMBER COMPARISON arithmetic_expression','predicate',3,'p_predicate','mtran_lab2.py',214),
  ('predicate -> NUMBER','predicate',1,'p_predicate','mtran_lab2.py',215),
  ('predicate -> IDENTIFIER','predicate',1,'p_predicate','mtran_lab2.py',216),
  ('while -> WHILE predicate DO block','while',4,'p_while','mtran_lab2.py',250),
  ('if -> IF predicate THEN block','if',4,'p_if','mtran_lab2.py',257),
  ('if -> IF predicate THEN expression','if',4,'p_if','mtran_lab2.py',258),
]
